// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/game.dart';
import 'models/static_data.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8286269305342874830),
      name: 'Ancient',
      lastPropertyId: const IdUid(3, 5571409152466238987),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7246546524839351586),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9099939067667203783),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 7738063563247228550)),
        ModelProperty(
            id: const IdUid(3, 5571409152466238987),
            name: 'extensionId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 7597521221434076631),
      name: 'Extension',
      lastPropertyId: const IdUid(2, 1992776988357478084),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2087379915708078895),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1992776988357478084),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 7369983334377431848))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 3926186375990568594),
      name: 'Game',
      lastPropertyId: const IdUid(7, 6782219691840358032),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5961226641306486177),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4837087208710242746),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 426596161279017131),
            name: 'duration',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6805702672241955639),
            name: 'ancientId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 8037079229414037731),
            relationTarget: 'Ancient'),
        ModelProperty(
            id: const IdUid(5, 5528132593675500008),
            name: 'scoring',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5379125985853224346),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6782219691840358032),
            name: 'status',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 2981017912408338561),
            name: 'extensions',
            targetId: const IdUid(2, 7597521221434076631)),
        ModelRelation(
            id: const IdUid(2, 5194693088126029709),
            name: 'heralds',
            targetId: const IdUid(4, 8161795646469413502)),
        ModelRelation(
            id: const IdUid(4, 9084586818540365403),
            name: 'userAssignments',
            targetId: const IdUid(8, 252854490301933876))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 8161795646469413502),
      name: 'Herald',
      lastPropertyId: const IdUid(3, 3158368769955150649),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1815442518989471443),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8634590056688527167),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 5936011359997036966)),
        ModelProperty(
            id: const IdUid(3, 3158368769955150649),
            name: 'extensionId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 8550225957078429900),
      name: 'Investigator',
      lastPropertyId: const IdUid(3, 4148505783415841000),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6871939308060731494),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1382636632534477789),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(5, 5412572468788863323)),
        ModelProperty(
            id: const IdUid(3, 4148505783415841000),
            name: 'extensionId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 4202786351063379320),
      name: 'DbVersion',
      lastPropertyId: const IdUid(2, 496444813668851931),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3103536571969796887),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 496444813668851931),
            name: 'date',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 2332136721909125803),
      name: 'User',
      lastPropertyId: const IdUid(2, 2962347236955740808),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7127326412603158080),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2962347236955740808),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(6, 2810604563412836467))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 252854490301933876),
      name: 'UserAssignment',
      lastPropertyId: const IdUid(4, 1296683563026920747),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5913648314087534135),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 373457407440829786),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 7532800273080434352),
            relationTarget: 'User'),
        ModelProperty(
            id: const IdUid(3, 2628701741477725180),
            name: 'investigatorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 4068999203637247089),
            relationTarget: 'Investigator'),
        ModelProperty(
            id: const IdUid(4, 1296683563026920747),
            name: 'state',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(8, 252854490301933876),
      lastIndexId: const IdUid(8, 4068999203637247089),
      lastRelationId: const IdUid(4, 9084586818540365403),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [3282709574231769951],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Ancient: EntityDefinition<Ancient>(
        model: _entities[0],
        toOneRelations: (Ancient object) => [],
        toManyRelations: (Ancient object) => {},
        getId: (Ancient object) => object.id,
        setId: (Ancient object, int id) {
          object.id = id;
        },
        objectToFB: (Ancient object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.extensionId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Ancient(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Extension: EntityDefinition<Extension>(
        model: _entities[1],
        toOneRelations: (Extension object) => [],
        toManyRelations: (Extension object) => {},
        getId: (Extension object) => object.id,
        setId: (Extension object, int id) {
          object.id = id;
        },
        objectToFB: (Extension object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Extension(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));

          return object;
        }),
    Game: EntityDefinition<Game>(
        model: _entities[2],
        toOneRelations: (Game object) => [object.ancient],
        toManyRelations: (Game object) => {
              RelInfo<Game>.toMany(1, object.id): object.extensions,
              RelInfo<Game>.toMany(2, object.id): object.heralds,
              RelInfo<Game>.toMany(4, object.id): object.userAssignments
            },
        getId: (Game object) => object.id,
        setId: (Game object, int id) {
          object.id = id;
        },
        objectToFB: (Game object, fb.Builder fbb) {
          final scoringOffset =
              object.scoring == null ? null : fbb.writeString(object.scoring!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final statusOffset = fbb.writeString(object.status);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.date.millisecondsSinceEpoch);
          fbb.addInt64(2, object.duration);
          fbb.addInt64(3, object.ancient.targetId);
          fbb.addOffset(4, scoringOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addOffset(6, statusOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Game()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..date = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0))
            ..duration =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8)
            ..scoring = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..status = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '');
          object.ancient.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.ancient.attach(store);
          InternalToManyAccess.setRelInfo(
            object.extensions,
            store,
            RelInfo<Game>.toMany(1, object.id),
            // store.box<Game>(),
          );
          InternalToManyAccess.setRelInfo(
            object.heralds,
            store,
            RelInfo<Game>.toMany(2, object.id),
            // store.box<Game>(),
          );
          InternalToManyAccess.setRelInfo(
            object.userAssignments,
            store,
            RelInfo<Game>.toMany(4, object.id),
            // store.box<Game>(),
          );
          return object;
        }),
    Herald: EntityDefinition<Herald>(
        model: _entities[3],
        toOneRelations: (Herald object) => [],
        toManyRelations: (Herald object) => {},
        getId: (Herald object) => object.id,
        setId: (Herald object, int id) {
          object.id = id;
        },
        objectToFB: (Herald object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.extensionId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Herald(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Investigator: EntityDefinition<Investigator>(
        model: _entities[4],
        toOneRelations: (Investigator object) => [],
        toManyRelations: (Investigator object) => {},
        getId: (Investigator object) => object.id,
        setId: (Investigator object, int id) {
          object.id = id;
        },
        objectToFB: (Investigator object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.extensionId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Investigator(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    DbVersion: EntityDefinition<DbVersion>(
        model: _entities[5],
        toOneRelations: (DbVersion object) => [],
        toManyRelations: (DbVersion object) => {},
        getId: (DbVersion object) => object.id,
        setId: (DbVersion object, int id) {
          object.id = id;
        },
        objectToFB: (DbVersion object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.date.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DbVersion()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..date = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));

          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[6],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    UserAssignment: EntityDefinition<UserAssignment>(
        model: _entities[7],
        toOneRelations: (UserAssignment object) =>
            [object.user, object.investigator],
        toManyRelations: (UserAssignment object) => {},
        getId: (UserAssignment object) => object.id,
        setId: (UserAssignment object, int id) {
          object.id = id;
        },
        objectToFB: (UserAssignment object, fb.Builder fbb) {
          final stateOffset = fbb.writeString(object.state);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.user.targetId);
          fbb.addInt64(2, object.investigator.targetId);
          fbb.addOffset(3, stateOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserAssignment()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..state = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '');
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.user.attach(store);
          object.investigator.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.investigator.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Ancient] entity fields to define ObjectBox queries.
class Ancient_ {
  /// see [Ancient.id]
  static final id = QueryIntegerProperty<Ancient>(_entities[0].properties[0]);

  /// see [Ancient.name]
  static final name = QueryStringProperty<Ancient>(_entities[0].properties[1]);

  /// see [Ancient.extensionId]
  static final extensionId =
      QueryIntegerProperty<Ancient>(_entities[0].properties[2]);
}

/// [Extension] entity fields to define ObjectBox queries.
class Extension_ {
  /// see [Extension.id]
  static final id = QueryIntegerProperty<Extension>(_entities[1].properties[0]);

  /// see [Extension.name]
  static final name =
      QueryStringProperty<Extension>(_entities[1].properties[1]);
}

/// [Game] entity fields to define ObjectBox queries.
class Game_ {
  /// see [Game.id]
  static final id = QueryIntegerProperty<Game>(_entities[2].properties[0]);

  /// see [Game.date]
  static final date = QueryIntegerProperty<Game>(_entities[2].properties[1]);

  /// see [Game.duration]
  static final duration =
      QueryIntegerProperty<Game>(_entities[2].properties[2]);

  /// see [Game.ancient]
  static final ancient =
      QueryRelationToOne<Game, Ancient>(_entities[2].properties[3]);

  /// see [Game.scoring]
  static final scoring = QueryStringProperty<Game>(_entities[2].properties[4]);

  /// see [Game.description]
  static final description =
      QueryStringProperty<Game>(_entities[2].properties[5]);

  /// see [Game.status]
  static final status = QueryStringProperty<Game>(_entities[2].properties[6]);

  /// see [Game.extensions]
  static final extensions =
      QueryRelationToMany<Game, Extension>(_entities[2].relations[0]);

  /// see [Game.heralds]
  static final heralds =
      QueryRelationToMany<Game, Herald>(_entities[2].relations[1]);

  /// see [Game.userAssignments]
  static final userAssignments =
      QueryRelationToMany<Game, UserAssignment>(_entities[2].relations[2]);
}

/// [Herald] entity fields to define ObjectBox queries.
class Herald_ {
  /// see [Herald.id]
  static final id = QueryIntegerProperty<Herald>(_entities[3].properties[0]);

  /// see [Herald.name]
  static final name = QueryStringProperty<Herald>(_entities[3].properties[1]);

  /// see [Herald.extensionId]
  static final extensionId =
      QueryIntegerProperty<Herald>(_entities[3].properties[2]);
}

/// [Investigator] entity fields to define ObjectBox queries.
class Investigator_ {
  /// see [Investigator.id]
  static final id =
      QueryIntegerProperty<Investigator>(_entities[4].properties[0]);

  /// see [Investigator.name]
  static final name =
      QueryStringProperty<Investigator>(_entities[4].properties[1]);

  /// see [Investigator.extensionId]
  static final extensionId =
      QueryIntegerProperty<Investigator>(_entities[4].properties[2]);
}

/// [DbVersion] entity fields to define ObjectBox queries.
class DbVersion_ {
  /// see [DbVersion.id]
  static final id = QueryIntegerProperty<DbVersion>(_entities[5].properties[0]);

  /// see [DbVersion.date]
  static final date =
      QueryIntegerProperty<DbVersion>(_entities[5].properties[1]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[6].properties[0]);

  /// see [User.name]
  static final name = QueryStringProperty<User>(_entities[6].properties[1]);
}

/// [UserAssignment] entity fields to define ObjectBox queries.
class UserAssignment_ {
  /// see [UserAssignment.id]
  static final id =
      QueryIntegerProperty<UserAssignment>(_entities[7].properties[0]);

  /// see [UserAssignment.user]
  static final user =
      QueryRelationToOne<UserAssignment, User>(_entities[7].properties[1]);

  /// see [UserAssignment.investigator]
  static final investigator = QueryRelationToOne<UserAssignment, Investigator>(
      _entities[7].properties[2]);

  /// see [UserAssignment.state]
  static final state =
      QueryStringProperty<UserAssignment>(_entities[7].properties[3]);
}
